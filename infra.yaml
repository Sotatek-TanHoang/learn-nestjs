services:
  api:
    image: learn-micoservice:1.0.0
    command: >
      sh -c "node dist/apps/api/main.js;"
    tty: true
    restart: always
    ports:
      - ${PORT}:${PORT}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - myNetwork
    user: node
  payment:
    image: learn-micoservice:1.0.0
    command: >
      sh -c "node dist/apps/payment/main.js;"
    tty: true
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - myNetwork
    user: node
  crawler:
    image: learn-micoservice:1.0.0
    command: >
      sh -c "node dist/apps/crawler/main.js basic"
    tty: true
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - myNetwork
    user: node
  producer:
    image: learn-micoservice:1.0.0
    command: >
      sh -c "node dist/apps/job-provider/main.js produce"
    tty: true
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - myNetwork
    user: node
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    volumes:
      - zooData:/var/lib/zookeeper/data
      - zooLog:/var/lib/zookeeper/log
    networks: 
        - myNetwork
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    networks: 
        - myNetwork
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    volumes:
      - brokerData:/var/lib/kafka/data
  postgres:
    image: postgres:15.3-alpine3.18
    ports:
      - ${DB_PORT}:5432
    volumes:
      - postgresData:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mina-bridge
    networks:
      myNetwork:
  redis:
    image: redis:6.2-alpine
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command: redis-server --save 20 1 --loglevel warning --port ${REDIS_PORT}
    networks:
      - myNetwork
    volumes:
      - redisData:/data
volumes:
  postgresData:
  redisData:
  brokerData:
  zooData:
  zooLog:
networks:
  myNetwork:
    name: learn-microservices${NODE_ENV}
